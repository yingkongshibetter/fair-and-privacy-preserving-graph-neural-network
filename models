import torch
import torch.nn as nn
from torch.nn import Dropout, SELU
from torch_geometric.nn import SAGEConv, GCNConv, GATConv
class GCN_Body(nn.Module):
    def __init__ (self, input_dim, hidden_dim, dropout):
        super(GCN_Body,self).__init__()
        self.conv1 = GCNConv(input_dim, hidden_dim)
        self.conv2 = GCNConv(hidden_dim, hidden_dim)
        self.dropout = Dropout(p=dropout)
        self.activation = SELU(inplace=True)
    def forward(self,x, edge_index):
        x = self.conv1(x, edge_index)
        x = self.activation(x)
        x = self.dropout(x)
        x = self.conv2(x, edge_index)
        return x
class GCN(nn.Module):
    def __init__(self, nfeat, nhid, nclass, dropout):
        super(GCN, self).__init__()
        self.body = GCN_Body(nfeat,nhid,dropout)
        self.fc = nn.Linear(nhid,nclass)
    def forward(self, x, adj):
        x_emb = self.body(x, adj)
        x = self.fc(x_emb.float())
        return x
class GIN_Body(nn.Module):
    def __init__(self, nfeat, nhid, dropout):
        super(GIN_Body, self).__init__()

        self.mlp1 = nn.Sequential(
            nn.Linear(nfeat, nhid),
            nn.ReLU(),
            nn.BatchNorm1d(nhid),
            nn.Linear(nhid, nhid),
        )
        self.gc1 = GINConv(self.mlp1)

        self.mlp2 = nn.Sequential(
            nn.Linear(nhid, nhid),
            nn.ReLU(),
            nn.BatchNorm1d(nhid),
            nn.Linear(nhid, nhid),
        )
        self.gc2 = GINConv(self.mlp2)
        self.dropout = Dropout(p=dropout)
        self.activation = SELU(inplace=True)
    def forward(self, x, edge_index):
        x = self.gc1(x, edge_index)
        x = self.activation(x)
        x = self.dropout(x)
        x = self.gc2(x, edge_index)
        return x
class GIN(nn.Module):
    def __init__(self, nfeat, nhid, nclass, dropout):
        super(GIN, self).__init__()

        self.body = GIN_Body(nfeat, nhid, dropout)
        self.fc = nn.Linear(nhid, nclass)

        for m in self.modules():
            self.weights_init(m)

    def weights_init(self, m):
        if isinstance(m, nn.Linear):
            torch.nn.init.xavier_uniform_(m.weight.data)
            if m.bias is not None:
                m.bias.data.fill_(0.0)

    def forward(self, x, edge_index):
        x = self.body(x, edge_index)
        x = self.fc(x)
        return x
class GAT_body(torch.nn.Module):
    def __init__(self, input_dim,  hidden_dim, dropout):
        super(GAT_body,self).__init__()
        heads = 4
        self.conv1 = GATConv(input_dim, hidden_dim, heads=heads, concat=True)
        self.conv2 = GATConv(heads * hidden_dim, hidden_dim, heads=1, concat=False)
        self.dropout = Dropout(p=dropout)
        self.activation = SELU(inplace=True)
    def forward(self,x, edge_index):
        x = self.conv1(x, edge_index)
        x = self.activation(x)
        x = self.dropout(x)
        x = self.conv2(x, edge_index)
        return x
class GAT(nn.Module):
    def __init__(self, nfeat, nhid, nclass, dropout):
        super(GAT, self).__init__()
        self.body = GAT_body(nfeat,nhid,dropout)
        self.fc = nn.Linear(nhid,nclass)
    def forward(self, x, adj):
        x_emb = self.body(x, adj)
        x = self.fc(x_emb.float())
        return x
